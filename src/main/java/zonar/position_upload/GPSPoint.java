/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package zonar.position_upload;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GPSPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7753136038918926159L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GPSPoint\",\"namespace\":\"zonar.position_upload\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"acceleration\",\"type\":\"double\"},{\"name\":\"heading\",\"type\":\"double\"},{\"name\":\"odometer\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"long\"},{\"name\":\"fuel_used\",\"type\":\"long\"},{\"name\":\"ext_air_temp\",\"type\":\"int\"},{\"name\":\"ext_air_pressure\",\"type\":\"int\"},{\"name\":\"avg_rpm\",\"type\":\"int\"},{\"name\":\"peak_rpm\",\"type\":\"int\"},{\"name\":\"avg_torque\",\"type\":\"int\"},{\"name\":\"avg_load\",\"type\":\"int\"},{\"name\":\"fuel_level\",\"type\":\"int\"},{\"name\":\"avg_boost_pressure\",\"type\":\"int\"},{\"name\":\"avg_fuel_filter_diff_pressure\",\"type\":\"int\"},{\"name\":\"avg_air_filter_diff_pressure\",\"type\":\"int\"},{\"name\":\"avg_dpf_diff_pressure\",\"type\":\"int\"},{\"name\":\"regen_status\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long timestamp;
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public double speed;
  @Deprecated public double acceleration;
  @Deprecated public double heading;
  @Deprecated public long odometer;
  @Deprecated public long status;
  @Deprecated public long fuel_used;
  @Deprecated public int ext_air_temp;
  @Deprecated public int ext_air_pressure;
  @Deprecated public int avg_rpm;
  @Deprecated public int peak_rpm;
  @Deprecated public int avg_torque;
  @Deprecated public int avg_load;
  @Deprecated public int fuel_level;
  @Deprecated public int avg_boost_pressure;
  @Deprecated public int avg_fuel_filter_diff_pressure;
  @Deprecated public int avg_air_filter_diff_pressure;
  @Deprecated public int avg_dpf_diff_pressure;
  @Deprecated public int regen_status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GPSPoint() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param speed The new value for speed
   * @param acceleration The new value for acceleration
   * @param heading The new value for heading
   * @param odometer The new value for odometer
   * @param status The new value for status
   * @param fuel_used The new value for fuel_used
   * @param ext_air_temp The new value for ext_air_temp
   * @param ext_air_pressure The new value for ext_air_pressure
   * @param avg_rpm The new value for avg_rpm
   * @param peak_rpm The new value for peak_rpm
   * @param avg_torque The new value for avg_torque
   * @param avg_load The new value for avg_load
   * @param fuel_level The new value for fuel_level
   * @param avg_boost_pressure The new value for avg_boost_pressure
   * @param avg_fuel_filter_diff_pressure The new value for avg_fuel_filter_diff_pressure
   * @param avg_air_filter_diff_pressure The new value for avg_air_filter_diff_pressure
   * @param avg_dpf_diff_pressure The new value for avg_dpf_diff_pressure
   * @param regen_status The new value for regen_status
   */
  public GPSPoint(java.lang.Long timestamp, java.lang.Double latitude, java.lang.Double longitude, java.lang.Double speed, java.lang.Double acceleration, java.lang.Double heading, java.lang.Long odometer, java.lang.Long status, java.lang.Long fuel_used, java.lang.Integer ext_air_temp, java.lang.Integer ext_air_pressure, java.lang.Integer avg_rpm, java.lang.Integer peak_rpm, java.lang.Integer avg_torque, java.lang.Integer avg_load, java.lang.Integer fuel_level, java.lang.Integer avg_boost_pressure, java.lang.Integer avg_fuel_filter_diff_pressure, java.lang.Integer avg_air_filter_diff_pressure, java.lang.Integer avg_dpf_diff_pressure, java.lang.Integer regen_status) {
    this.timestamp = timestamp;
    this.latitude = latitude;
    this.longitude = longitude;
    this.speed = speed;
    this.acceleration = acceleration;
    this.heading = heading;
    this.odometer = odometer;
    this.status = status;
    this.fuel_used = fuel_used;
    this.ext_air_temp = ext_air_temp;
    this.ext_air_pressure = ext_air_pressure;
    this.avg_rpm = avg_rpm;
    this.peak_rpm = peak_rpm;
    this.avg_torque = avg_torque;
    this.avg_load = avg_load;
    this.fuel_level = fuel_level;
    this.avg_boost_pressure = avg_boost_pressure;
    this.avg_fuel_filter_diff_pressure = avg_fuel_filter_diff_pressure;
    this.avg_air_filter_diff_pressure = avg_air_filter_diff_pressure;
    this.avg_dpf_diff_pressure = avg_dpf_diff_pressure;
    this.regen_status = regen_status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return latitude;
    case 2: return longitude;
    case 3: return speed;
    case 4: return acceleration;
    case 5: return heading;
    case 6: return odometer;
    case 7: return status;
    case 8: return fuel_used;
    case 9: return ext_air_temp;
    case 10: return ext_air_pressure;
    case 11: return avg_rpm;
    case 12: return peak_rpm;
    case 13: return avg_torque;
    case 14: return avg_load;
    case 15: return fuel_level;
    case 16: return avg_boost_pressure;
    case 17: return avg_fuel_filter_diff_pressure;
    case 18: return avg_air_filter_diff_pressure;
    case 19: return avg_dpf_diff_pressure;
    case 20: return regen_status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: latitude = (java.lang.Double)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    case 3: speed = (java.lang.Double)value$; break;
    case 4: acceleration = (java.lang.Double)value$; break;
    case 5: heading = (java.lang.Double)value$; break;
    case 6: odometer = (java.lang.Long)value$; break;
    case 7: status = (java.lang.Long)value$; break;
    case 8: fuel_used = (java.lang.Long)value$; break;
    case 9: ext_air_temp = (java.lang.Integer)value$; break;
    case 10: ext_air_pressure = (java.lang.Integer)value$; break;
    case 11: avg_rpm = (java.lang.Integer)value$; break;
    case 12: peak_rpm = (java.lang.Integer)value$; break;
    case 13: avg_torque = (java.lang.Integer)value$; break;
    case 14: avg_load = (java.lang.Integer)value$; break;
    case 15: fuel_level = (java.lang.Integer)value$; break;
    case 16: avg_boost_pressure = (java.lang.Integer)value$; break;
    case 17: avg_fuel_filter_diff_pressure = (java.lang.Integer)value$; break;
    case 18: avg_air_filter_diff_pressure = (java.lang.Integer)value$; break;
    case 19: avg_dpf_diff_pressure = (java.lang.Integer)value$; break;
    case 20: regen_status = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'acceleration' field.
   * @return The value of the 'acceleration' field.
   */
  public java.lang.Double getAcceleration() {
    return acceleration;
  }

  /**
   * Sets the value of the 'acceleration' field.
   * @param value the value to set.
   */
  public void setAcceleration(java.lang.Double value) {
    this.acceleration = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return The value of the 'heading' field.
   */
  public java.lang.Double getHeading() {
    return heading;
  }

  /**
   * Sets the value of the 'heading' field.
   * @param value the value to set.
   */
  public void setHeading(java.lang.Double value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'odometer' field.
   * @return The value of the 'odometer' field.
   */
  public java.lang.Long getOdometer() {
    return odometer;
  }

  /**
   * Sets the value of the 'odometer' field.
   * @param value the value to set.
   */
  public void setOdometer(java.lang.Long value) {
    this.odometer = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.Long getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.Long value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'fuel_used' field.
   * @return The value of the 'fuel_used' field.
   */
  public java.lang.Long getFuelUsed() {
    return fuel_used;
  }

  /**
   * Sets the value of the 'fuel_used' field.
   * @param value the value to set.
   */
  public void setFuelUsed(java.lang.Long value) {
    this.fuel_used = value;
  }

  /**
   * Gets the value of the 'ext_air_temp' field.
   * @return The value of the 'ext_air_temp' field.
   */
  public java.lang.Integer getExtAirTemp() {
    return ext_air_temp;
  }

  /**
   * Sets the value of the 'ext_air_temp' field.
   * @param value the value to set.
   */
  public void setExtAirTemp(java.lang.Integer value) {
    this.ext_air_temp = value;
  }

  /**
   * Gets the value of the 'ext_air_pressure' field.
   * @return The value of the 'ext_air_pressure' field.
   */
  public java.lang.Integer getExtAirPressure() {
    return ext_air_pressure;
  }

  /**
   * Sets the value of the 'ext_air_pressure' field.
   * @param value the value to set.
   */
  public void setExtAirPressure(java.lang.Integer value) {
    this.ext_air_pressure = value;
  }

  /**
   * Gets the value of the 'avg_rpm' field.
   * @return The value of the 'avg_rpm' field.
   */
  public java.lang.Integer getAvgRpm() {
    return avg_rpm;
  }

  /**
   * Sets the value of the 'avg_rpm' field.
   * @param value the value to set.
   */
  public void setAvgRpm(java.lang.Integer value) {
    this.avg_rpm = value;
  }

  /**
   * Gets the value of the 'peak_rpm' field.
   * @return The value of the 'peak_rpm' field.
   */
  public java.lang.Integer getPeakRpm() {
    return peak_rpm;
  }

  /**
   * Sets the value of the 'peak_rpm' field.
   * @param value the value to set.
   */
  public void setPeakRpm(java.lang.Integer value) {
    this.peak_rpm = value;
  }

  /**
   * Gets the value of the 'avg_torque' field.
   * @return The value of the 'avg_torque' field.
   */
  public java.lang.Integer getAvgTorque() {
    return avg_torque;
  }

  /**
   * Sets the value of the 'avg_torque' field.
   * @param value the value to set.
   */
  public void setAvgTorque(java.lang.Integer value) {
    this.avg_torque = value;
  }

  /**
   * Gets the value of the 'avg_load' field.
   * @return The value of the 'avg_load' field.
   */
  public java.lang.Integer getAvgLoad() {
    return avg_load;
  }

  /**
   * Sets the value of the 'avg_load' field.
   * @param value the value to set.
   */
  public void setAvgLoad(java.lang.Integer value) {
    this.avg_load = value;
  }

  /**
   * Gets the value of the 'fuel_level' field.
   * @return The value of the 'fuel_level' field.
   */
  public java.lang.Integer getFuelLevel() {
    return fuel_level;
  }

  /**
   * Sets the value of the 'fuel_level' field.
   * @param value the value to set.
   */
  public void setFuelLevel(java.lang.Integer value) {
    this.fuel_level = value;
  }

  /**
   * Gets the value of the 'avg_boost_pressure' field.
   * @return The value of the 'avg_boost_pressure' field.
   */
  public java.lang.Integer getAvgBoostPressure() {
    return avg_boost_pressure;
  }

  /**
   * Sets the value of the 'avg_boost_pressure' field.
   * @param value the value to set.
   */
  public void setAvgBoostPressure(java.lang.Integer value) {
    this.avg_boost_pressure = value;
  }

  /**
   * Gets the value of the 'avg_fuel_filter_diff_pressure' field.
   * @return The value of the 'avg_fuel_filter_diff_pressure' field.
   */
  public java.lang.Integer getAvgFuelFilterDiffPressure() {
    return avg_fuel_filter_diff_pressure;
  }

  /**
   * Sets the value of the 'avg_fuel_filter_diff_pressure' field.
   * @param value the value to set.
   */
  public void setAvgFuelFilterDiffPressure(java.lang.Integer value) {
    this.avg_fuel_filter_diff_pressure = value;
  }

  /**
   * Gets the value of the 'avg_air_filter_diff_pressure' field.
   * @return The value of the 'avg_air_filter_diff_pressure' field.
   */
  public java.lang.Integer getAvgAirFilterDiffPressure() {
    return avg_air_filter_diff_pressure;
  }

  /**
   * Sets the value of the 'avg_air_filter_diff_pressure' field.
   * @param value the value to set.
   */
  public void setAvgAirFilterDiffPressure(java.lang.Integer value) {
    this.avg_air_filter_diff_pressure = value;
  }

  /**
   * Gets the value of the 'avg_dpf_diff_pressure' field.
   * @return The value of the 'avg_dpf_diff_pressure' field.
   */
  public java.lang.Integer getAvgDpfDiffPressure() {
    return avg_dpf_diff_pressure;
  }

  /**
   * Sets the value of the 'avg_dpf_diff_pressure' field.
   * @param value the value to set.
   */
  public void setAvgDpfDiffPressure(java.lang.Integer value) {
    this.avg_dpf_diff_pressure = value;
  }

  /**
   * Gets the value of the 'regen_status' field.
   * @return The value of the 'regen_status' field.
   */
  public java.lang.Integer getRegenStatus() {
    return regen_status;
  }

  /**
   * Sets the value of the 'regen_status' field.
   * @param value the value to set.
   */
  public void setRegenStatus(java.lang.Integer value) {
    this.regen_status = value;
  }

  /**
   * Creates a new GPSPoint RecordBuilder.
   * @return A new GPSPoint RecordBuilder
   */
  public static zonar.position_upload.GPSPoint.Builder newBuilder() {
    return new zonar.position_upload.GPSPoint.Builder();
  }

  /**
   * Creates a new GPSPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GPSPoint RecordBuilder
   */
  public static zonar.position_upload.GPSPoint.Builder newBuilder(zonar.position_upload.GPSPoint.Builder other) {
    return new zonar.position_upload.GPSPoint.Builder(other);
  }

  /**
   * Creates a new GPSPoint RecordBuilder by copying an existing GPSPoint instance.
   * @param other The existing instance to copy.
   * @return A new GPSPoint RecordBuilder
   */
  public static zonar.position_upload.GPSPoint.Builder newBuilder(zonar.position_upload.GPSPoint other) {
    return new zonar.position_upload.GPSPoint.Builder(other);
  }

  /**
   * RecordBuilder for GPSPoint instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GPSPoint>
    implements org.apache.avro.data.RecordBuilder<GPSPoint> {

    private long timestamp;
    private double latitude;
    private double longitude;
    private double speed;
    private double acceleration;
    private double heading;
    private long odometer;
    private long status;
    private long fuel_used;
    private int ext_air_temp;
    private int ext_air_pressure;
    private int avg_rpm;
    private int peak_rpm;
    private int avg_torque;
    private int avg_load;
    private int fuel_level;
    private int avg_boost_pressure;
    private int avg_fuel_filter_diff_pressure;
    private int avg_air_filter_diff_pressure;
    private int avg_dpf_diff_pressure;
    private int regen_status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(zonar.position_upload.GPSPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[4].schema(), other.acceleration);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heading)) {
        this.heading = data().deepCopy(fields()[5].schema(), other.heading);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.odometer)) {
        this.odometer = data().deepCopy(fields()[6].schema(), other.odometer);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fuel_used)) {
        this.fuel_used = data().deepCopy(fields()[8].schema(), other.fuel_used);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ext_air_temp)) {
        this.ext_air_temp = data().deepCopy(fields()[9].schema(), other.ext_air_temp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ext_air_pressure)) {
        this.ext_air_pressure = data().deepCopy(fields()[10].schema(), other.ext_air_pressure);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.avg_rpm)) {
        this.avg_rpm = data().deepCopy(fields()[11].schema(), other.avg_rpm);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.peak_rpm)) {
        this.peak_rpm = data().deepCopy(fields()[12].schema(), other.peak_rpm);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.avg_torque)) {
        this.avg_torque = data().deepCopy(fields()[13].schema(), other.avg_torque);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.avg_load)) {
        this.avg_load = data().deepCopy(fields()[14].schema(), other.avg_load);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fuel_level)) {
        this.fuel_level = data().deepCopy(fields()[15].schema(), other.fuel_level);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.avg_boost_pressure)) {
        this.avg_boost_pressure = data().deepCopy(fields()[16].schema(), other.avg_boost_pressure);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.avg_fuel_filter_diff_pressure)) {
        this.avg_fuel_filter_diff_pressure = data().deepCopy(fields()[17].schema(), other.avg_fuel_filter_diff_pressure);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.avg_air_filter_diff_pressure)) {
        this.avg_air_filter_diff_pressure = data().deepCopy(fields()[18].schema(), other.avg_air_filter_diff_pressure);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.avg_dpf_diff_pressure)) {
        this.avg_dpf_diff_pressure = data().deepCopy(fields()[19].schema(), other.avg_dpf_diff_pressure);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.regen_status)) {
        this.regen_status = data().deepCopy(fields()[20].schema(), other.regen_status);
        fieldSetFlags()[20] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GPSPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(zonar.position_upload.GPSPoint other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[4].schema(), other.acceleration);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heading)) {
        this.heading = data().deepCopy(fields()[5].schema(), other.heading);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.odometer)) {
        this.odometer = data().deepCopy(fields()[6].schema(), other.odometer);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fuel_used)) {
        this.fuel_used = data().deepCopy(fields()[8].schema(), other.fuel_used);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ext_air_temp)) {
        this.ext_air_temp = data().deepCopy(fields()[9].schema(), other.ext_air_temp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ext_air_pressure)) {
        this.ext_air_pressure = data().deepCopy(fields()[10].schema(), other.ext_air_pressure);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.avg_rpm)) {
        this.avg_rpm = data().deepCopy(fields()[11].schema(), other.avg_rpm);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.peak_rpm)) {
        this.peak_rpm = data().deepCopy(fields()[12].schema(), other.peak_rpm);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.avg_torque)) {
        this.avg_torque = data().deepCopy(fields()[13].schema(), other.avg_torque);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.avg_load)) {
        this.avg_load = data().deepCopy(fields()[14].schema(), other.avg_load);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fuel_level)) {
        this.fuel_level = data().deepCopy(fields()[15].schema(), other.fuel_level);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.avg_boost_pressure)) {
        this.avg_boost_pressure = data().deepCopy(fields()[16].schema(), other.avg_boost_pressure);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.avg_fuel_filter_diff_pressure)) {
        this.avg_fuel_filter_diff_pressure = data().deepCopy(fields()[17].schema(), other.avg_fuel_filter_diff_pressure);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.avg_air_filter_diff_pressure)) {
        this.avg_air_filter_diff_pressure = data().deepCopy(fields()[18].schema(), other.avg_air_filter_diff_pressure);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.avg_dpf_diff_pressure)) {
        this.avg_dpf_diff_pressure = data().deepCopy(fields()[19].schema(), other.avg_dpf_diff_pressure);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.regen_status)) {
        this.regen_status = data().deepCopy(fields()[20].schema(), other.regen_status);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setLatitude(double value) {
      validate(fields()[1], value);
      this.latitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearLatitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setSpeed(double value) {
      validate(fields()[3], value);
      this.speed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearSpeed() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'acceleration' field.
      * @return The value.
      */
    public java.lang.Double getAcceleration() {
      return acceleration;
    }

    /**
      * Sets the value of the 'acceleration' field.
      * @param value The value of 'acceleration'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAcceleration(double value) {
      validate(fields()[4], value);
      this.acceleration = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'acceleration' field has been set.
      * @return True if the 'acceleration' field has been set, false otherwise.
      */
    public boolean hasAcceleration() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'acceleration' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAcceleration() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * @return The value.
      */
    public java.lang.Double getHeading() {
      return heading;
    }

    /**
      * Sets the value of the 'heading' field.
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setHeading(double value) {
      validate(fields()[5], value);
      this.heading = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'heading' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearHeading() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'odometer' field.
      * @return The value.
      */
    public java.lang.Long getOdometer() {
      return odometer;
    }

    /**
      * Sets the value of the 'odometer' field.
      * @param value The value of 'odometer'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setOdometer(long value) {
      validate(fields()[6], value);
      this.odometer = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'odometer' field has been set.
      * @return True if the 'odometer' field has been set, false otherwise.
      */
    public boolean hasOdometer() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'odometer' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearOdometer() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.Long getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setStatus(long value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearStatus() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuel_used' field.
      * @return The value.
      */
    public java.lang.Long getFuelUsed() {
      return fuel_used;
    }

    /**
      * Sets the value of the 'fuel_used' field.
      * @param value The value of 'fuel_used'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setFuelUsed(long value) {
      validate(fields()[8], value);
      this.fuel_used = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'fuel_used' field has been set.
      * @return True if the 'fuel_used' field has been set, false otherwise.
      */
    public boolean hasFuelUsed() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'fuel_used' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearFuelUsed() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ext_air_temp' field.
      * @return The value.
      */
    public java.lang.Integer getExtAirTemp() {
      return ext_air_temp;
    }

    /**
      * Sets the value of the 'ext_air_temp' field.
      * @param value The value of 'ext_air_temp'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setExtAirTemp(int value) {
      validate(fields()[9], value);
      this.ext_air_temp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ext_air_temp' field has been set.
      * @return True if the 'ext_air_temp' field has been set, false otherwise.
      */
    public boolean hasExtAirTemp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'ext_air_temp' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearExtAirTemp() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ext_air_pressure' field.
      * @return The value.
      */
    public java.lang.Integer getExtAirPressure() {
      return ext_air_pressure;
    }

    /**
      * Sets the value of the 'ext_air_pressure' field.
      * @param value The value of 'ext_air_pressure'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setExtAirPressure(int value) {
      validate(fields()[10], value);
      this.ext_air_pressure = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ext_air_pressure' field has been set.
      * @return True if the 'ext_air_pressure' field has been set, false otherwise.
      */
    public boolean hasExtAirPressure() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ext_air_pressure' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearExtAirPressure() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_rpm' field.
      * @return The value.
      */
    public java.lang.Integer getAvgRpm() {
      return avg_rpm;
    }

    /**
      * Sets the value of the 'avg_rpm' field.
      * @param value The value of 'avg_rpm'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgRpm(int value) {
      validate(fields()[11], value);
      this.avg_rpm = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_rpm' field has been set.
      * @return True if the 'avg_rpm' field has been set, false otherwise.
      */
    public boolean hasAvgRpm() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'avg_rpm' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgRpm() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'peak_rpm' field.
      * @return The value.
      */
    public java.lang.Integer getPeakRpm() {
      return peak_rpm;
    }

    /**
      * Sets the value of the 'peak_rpm' field.
      * @param value The value of 'peak_rpm'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setPeakRpm(int value) {
      validate(fields()[12], value);
      this.peak_rpm = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'peak_rpm' field has been set.
      * @return True if the 'peak_rpm' field has been set, false otherwise.
      */
    public boolean hasPeakRpm() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'peak_rpm' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearPeakRpm() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_torque' field.
      * @return The value.
      */
    public java.lang.Integer getAvgTorque() {
      return avg_torque;
    }

    /**
      * Sets the value of the 'avg_torque' field.
      * @param value The value of 'avg_torque'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgTorque(int value) {
      validate(fields()[13], value);
      this.avg_torque = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_torque' field has been set.
      * @return True if the 'avg_torque' field has been set, false otherwise.
      */
    public boolean hasAvgTorque() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'avg_torque' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgTorque() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_load' field.
      * @return The value.
      */
    public java.lang.Integer getAvgLoad() {
      return avg_load;
    }

    /**
      * Sets the value of the 'avg_load' field.
      * @param value The value of 'avg_load'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgLoad(int value) {
      validate(fields()[14], value);
      this.avg_load = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_load' field has been set.
      * @return True if the 'avg_load' field has been set, false otherwise.
      */
    public boolean hasAvgLoad() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'avg_load' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgLoad() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuel_level' field.
      * @return The value.
      */
    public java.lang.Integer getFuelLevel() {
      return fuel_level;
    }

    /**
      * Sets the value of the 'fuel_level' field.
      * @param value The value of 'fuel_level'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setFuelLevel(int value) {
      validate(fields()[15], value);
      this.fuel_level = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'fuel_level' field has been set.
      * @return True if the 'fuel_level' field has been set, false otherwise.
      */
    public boolean hasFuelLevel() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'fuel_level' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearFuelLevel() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_boost_pressure' field.
      * @return The value.
      */
    public java.lang.Integer getAvgBoostPressure() {
      return avg_boost_pressure;
    }

    /**
      * Sets the value of the 'avg_boost_pressure' field.
      * @param value The value of 'avg_boost_pressure'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgBoostPressure(int value) {
      validate(fields()[16], value);
      this.avg_boost_pressure = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_boost_pressure' field has been set.
      * @return True if the 'avg_boost_pressure' field has been set, false otherwise.
      */
    public boolean hasAvgBoostPressure() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'avg_boost_pressure' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgBoostPressure() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_fuel_filter_diff_pressure' field.
      * @return The value.
      */
    public java.lang.Integer getAvgFuelFilterDiffPressure() {
      return avg_fuel_filter_diff_pressure;
    }

    /**
      * Sets the value of the 'avg_fuel_filter_diff_pressure' field.
      * @param value The value of 'avg_fuel_filter_diff_pressure'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgFuelFilterDiffPressure(int value) {
      validate(fields()[17], value);
      this.avg_fuel_filter_diff_pressure = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_fuel_filter_diff_pressure' field has been set.
      * @return True if the 'avg_fuel_filter_diff_pressure' field has been set, false otherwise.
      */
    public boolean hasAvgFuelFilterDiffPressure() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'avg_fuel_filter_diff_pressure' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgFuelFilterDiffPressure() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_air_filter_diff_pressure' field.
      * @return The value.
      */
    public java.lang.Integer getAvgAirFilterDiffPressure() {
      return avg_air_filter_diff_pressure;
    }

    /**
      * Sets the value of the 'avg_air_filter_diff_pressure' field.
      * @param value The value of 'avg_air_filter_diff_pressure'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgAirFilterDiffPressure(int value) {
      validate(fields()[18], value);
      this.avg_air_filter_diff_pressure = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_air_filter_diff_pressure' field has been set.
      * @return True if the 'avg_air_filter_diff_pressure' field has been set, false otherwise.
      */
    public boolean hasAvgAirFilterDiffPressure() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'avg_air_filter_diff_pressure' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgAirFilterDiffPressure() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_dpf_diff_pressure' field.
      * @return The value.
      */
    public java.lang.Integer getAvgDpfDiffPressure() {
      return avg_dpf_diff_pressure;
    }

    /**
      * Sets the value of the 'avg_dpf_diff_pressure' field.
      * @param value The value of 'avg_dpf_diff_pressure'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setAvgDpfDiffPressure(int value) {
      validate(fields()[19], value);
      this.avg_dpf_diff_pressure = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_dpf_diff_pressure' field has been set.
      * @return True if the 'avg_dpf_diff_pressure' field has been set, false otherwise.
      */
    public boolean hasAvgDpfDiffPressure() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'avg_dpf_diff_pressure' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearAvgDpfDiffPressure() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'regen_status' field.
      * @return The value.
      */
    public java.lang.Integer getRegenStatus() {
      return regen_status;
    }

    /**
      * Sets the value of the 'regen_status' field.
      * @param value The value of 'regen_status'.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder setRegenStatus(int value) {
      validate(fields()[20], value);
      this.regen_status = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'regen_status' field has been set.
      * @return True if the 'regen_status' field has been set, false otherwise.
      */
    public boolean hasRegenStatus() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'regen_status' field.
      * @return This builder.
      */
    public zonar.position_upload.GPSPoint.Builder clearRegenStatus() {
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    public GPSPoint build() {
      try {
        GPSPoint record = new GPSPoint();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.latitude = fieldSetFlags()[1] ? this.latitude : (java.lang.Double) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        record.speed = fieldSetFlags()[3] ? this.speed : (java.lang.Double) defaultValue(fields()[3]);
        record.acceleration = fieldSetFlags()[4] ? this.acceleration : (java.lang.Double) defaultValue(fields()[4]);
        record.heading = fieldSetFlags()[5] ? this.heading : (java.lang.Double) defaultValue(fields()[5]);
        record.odometer = fieldSetFlags()[6] ? this.odometer : (java.lang.Long) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.Long) defaultValue(fields()[7]);
        record.fuel_used = fieldSetFlags()[8] ? this.fuel_used : (java.lang.Long) defaultValue(fields()[8]);
        record.ext_air_temp = fieldSetFlags()[9] ? this.ext_air_temp : (java.lang.Integer) defaultValue(fields()[9]);
        record.ext_air_pressure = fieldSetFlags()[10] ? this.ext_air_pressure : (java.lang.Integer) defaultValue(fields()[10]);
        record.avg_rpm = fieldSetFlags()[11] ? this.avg_rpm : (java.lang.Integer) defaultValue(fields()[11]);
        record.peak_rpm = fieldSetFlags()[12] ? this.peak_rpm : (java.lang.Integer) defaultValue(fields()[12]);
        record.avg_torque = fieldSetFlags()[13] ? this.avg_torque : (java.lang.Integer) defaultValue(fields()[13]);
        record.avg_load = fieldSetFlags()[14] ? this.avg_load : (java.lang.Integer) defaultValue(fields()[14]);
        record.fuel_level = fieldSetFlags()[15] ? this.fuel_level : (java.lang.Integer) defaultValue(fields()[15]);
        record.avg_boost_pressure = fieldSetFlags()[16] ? this.avg_boost_pressure : (java.lang.Integer) defaultValue(fields()[16]);
        record.avg_fuel_filter_diff_pressure = fieldSetFlags()[17] ? this.avg_fuel_filter_diff_pressure : (java.lang.Integer) defaultValue(fields()[17]);
        record.avg_air_filter_diff_pressure = fieldSetFlags()[18] ? this.avg_air_filter_diff_pressure : (java.lang.Integer) defaultValue(fields()[18]);
        record.avg_dpf_diff_pressure = fieldSetFlags()[19] ? this.avg_dpf_diff_pressure : (java.lang.Integer) defaultValue(fields()[19]);
        record.regen_status = fieldSetFlags()[20] ? this.regen_status : (java.lang.Integer) defaultValue(fields()[20]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
