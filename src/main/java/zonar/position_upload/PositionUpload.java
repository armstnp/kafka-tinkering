/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package zonar.position_upload;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PositionUpload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1080218644254768835L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PositionUpload\",\"namespace\":\"zonar.position_upload\",\"fields\":[{\"name\":\"device_id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"int\"},{\"name\":\"ts\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"count\",\"type\":[\"null\",\"int\"]},{\"name\":\"skipcount\",\"type\":[\"null\",\"int\"]},{\"name\":\"first_ts\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"last_ts\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"addr\",\"type\":\"string\"},{\"name\":\"sftware\",\"type\":[\"null\",\"string\"]},{\"name\":\"version\",\"type\":[\"null\",\"string\"]},{\"name\":\"logvers\",\"type\":\"int\"},{\"name\":\"payload\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GPSPoint\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"acceleration\",\"type\":\"double\"},{\"name\":\"heading\",\"type\":\"double\"},{\"name\":\"odometer\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"long\"},{\"name\":\"fuel_used\",\"type\":\"long\"},{\"name\":\"ext_air_temp\",\"type\":\"int\"},{\"name\":\"ext_air_pressure\",\"type\":\"int\"},{\"name\":\"avg_rpm\",\"type\":\"int\"},{\"name\":\"peak_rpm\",\"type\":\"int\"},{\"name\":\"avg_torque\",\"type\":\"int\"},{\"name\":\"avg_load\",\"type\":\"int\"},{\"name\":\"fuel_level\",\"type\":\"int\"},{\"name\":\"avg_boost_pressure\",\"type\":\"int\"},{\"name\":\"avg_fuel_filter_diff_pressure\",\"type\":\"int\"},{\"name\":\"avg_air_filter_diff_pressure\",\"type\":\"int\"},{\"name\":\"avg_dpf_diff_pressure\",\"type\":\"int\"},{\"name\":\"regen_status\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long device_id;
  @Deprecated public int type;
  @Deprecated public java.lang.Long ts;
  @Deprecated public java.lang.Integer count;
  @Deprecated public java.lang.Integer skipcount;
  @Deprecated public java.lang.Long first_ts;
  @Deprecated public java.lang.Long last_ts;
  @Deprecated public java.lang.CharSequence addr;
  @Deprecated public java.lang.CharSequence sftware;
  @Deprecated public java.lang.CharSequence version;
  @Deprecated public int logvers;
  @Deprecated public java.util.List<zonar.position_upload.GPSPoint> payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PositionUpload() {}

  /**
   * All-args constructor.
   * @param device_id The new value for device_id
   * @param type The new value for type
   * @param ts The new value for ts
   * @param count The new value for count
   * @param skipcount The new value for skipcount
   * @param first_ts The new value for first_ts
   * @param last_ts The new value for last_ts
   * @param addr The new value for addr
   * @param sftware The new value for sftware
   * @param version The new value for version
   * @param logvers The new value for logvers
   * @param payload The new value for payload
   */
  public PositionUpload(java.lang.Long device_id, java.lang.Integer type, java.lang.Long ts, java.lang.Integer count, java.lang.Integer skipcount, java.lang.Long first_ts, java.lang.Long last_ts, java.lang.CharSequence addr, java.lang.CharSequence sftware, java.lang.CharSequence version, java.lang.Integer logvers, java.util.List<zonar.position_upload.GPSPoint> payload) {
    this.device_id = device_id;
    this.type = type;
    this.ts = ts;
    this.count = count;
    this.skipcount = skipcount;
    this.first_ts = first_ts;
    this.last_ts = last_ts;
    this.addr = addr;
    this.sftware = sftware;
    this.version = version;
    this.logvers = logvers;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return device_id;
    case 1: return type;
    case 2: return ts;
    case 3: return count;
    case 4: return skipcount;
    case 5: return first_ts;
    case 6: return last_ts;
    case 7: return addr;
    case 8: return sftware;
    case 9: return version;
    case 10: return logvers;
    case 11: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: device_id = (java.lang.Long)value$; break;
    case 1: type = (java.lang.Integer)value$; break;
    case 2: ts = (java.lang.Long)value$; break;
    case 3: count = (java.lang.Integer)value$; break;
    case 4: skipcount = (java.lang.Integer)value$; break;
    case 5: first_ts = (java.lang.Long)value$; break;
    case 6: last_ts = (java.lang.Long)value$; break;
    case 7: addr = (java.lang.CharSequence)value$; break;
    case 8: sftware = (java.lang.CharSequence)value$; break;
    case 9: version = (java.lang.CharSequence)value$; break;
    case 10: logvers = (java.lang.Integer)value$; break;
    case 11: payload = (java.util.List<zonar.position_upload.GPSPoint>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.Long getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.Long value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.Integer value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'skipcount' field.
   * @return The value of the 'skipcount' field.
   */
  public java.lang.Integer getSkipcount() {
    return skipcount;
  }

  /**
   * Sets the value of the 'skipcount' field.
   * @param value the value to set.
   */
  public void setSkipcount(java.lang.Integer value) {
    this.skipcount = value;
  }

  /**
   * Gets the value of the 'first_ts' field.
   * @return The value of the 'first_ts' field.
   */
  public java.lang.Long getFirstTs() {
    return first_ts;
  }

  /**
   * Sets the value of the 'first_ts' field.
   * @param value the value to set.
   */
  public void setFirstTs(java.lang.Long value) {
    this.first_ts = value;
  }

  /**
   * Gets the value of the 'last_ts' field.
   * @return The value of the 'last_ts' field.
   */
  public java.lang.Long getLastTs() {
    return last_ts;
  }

  /**
   * Sets the value of the 'last_ts' field.
   * @param value the value to set.
   */
  public void setLastTs(java.lang.Long value) {
    this.last_ts = value;
  }

  /**
   * Gets the value of the 'addr' field.
   * @return The value of the 'addr' field.
   */
  public java.lang.CharSequence getAddr() {
    return addr;
  }

  /**
   * Sets the value of the 'addr' field.
   * @param value the value to set.
   */
  public void setAddr(java.lang.CharSequence value) {
    this.addr = value;
  }

  /**
   * Gets the value of the 'sftware' field.
   * @return The value of the 'sftware' field.
   */
  public java.lang.CharSequence getSftware() {
    return sftware;
  }

  /**
   * Sets the value of the 'sftware' field.
   * @param value the value to set.
   */
  public void setSftware(java.lang.CharSequence value) {
    this.sftware = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'logvers' field.
   * @return The value of the 'logvers' field.
   */
  public java.lang.Integer getLogvers() {
    return logvers;
  }

  /**
   * Sets the value of the 'logvers' field.
   * @param value the value to set.
   */
  public void setLogvers(java.lang.Integer value) {
    this.logvers = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.util.List<zonar.position_upload.GPSPoint> getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.util.List<zonar.position_upload.GPSPoint> value) {
    this.payload = value;
  }

  /**
   * Creates a new PositionUpload RecordBuilder.
   * @return A new PositionUpload RecordBuilder
   */
  public static zonar.position_upload.PositionUpload.Builder newBuilder() {
    return new zonar.position_upload.PositionUpload.Builder();
  }

  /**
   * Creates a new PositionUpload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PositionUpload RecordBuilder
   */
  public static zonar.position_upload.PositionUpload.Builder newBuilder(zonar.position_upload.PositionUpload.Builder other) {
    return new zonar.position_upload.PositionUpload.Builder(other);
  }

  /**
   * Creates a new PositionUpload RecordBuilder by copying an existing PositionUpload instance.
   * @param other The existing instance to copy.
   * @return A new PositionUpload RecordBuilder
   */
  public static zonar.position_upload.PositionUpload.Builder newBuilder(zonar.position_upload.PositionUpload other) {
    return new zonar.position_upload.PositionUpload.Builder(other);
  }

  /**
   * RecordBuilder for PositionUpload instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PositionUpload>
    implements org.apache.avro.data.RecordBuilder<PositionUpload> {

    private long device_id;
    private int type;
    private java.lang.Long ts;
    private java.lang.Integer count;
    private java.lang.Integer skipcount;
    private java.lang.Long first_ts;
    private java.lang.Long last_ts;
    private java.lang.CharSequence addr;
    private java.lang.CharSequence sftware;
    private java.lang.CharSequence version;
    private int logvers;
    private java.util.List<zonar.position_upload.GPSPoint> payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(zonar.position_upload.PositionUpload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.device_id)) {
        this.device_id = data().deepCopy(fields()[0].schema(), other.device_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.count)) {
        this.count = data().deepCopy(fields()[3].schema(), other.count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.skipcount)) {
        this.skipcount = data().deepCopy(fields()[4].schema(), other.skipcount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.first_ts)) {
        this.first_ts = data().deepCopy(fields()[5].schema(), other.first_ts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.last_ts)) {
        this.last_ts = data().deepCopy(fields()[6].schema(), other.last_ts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.addr)) {
        this.addr = data().deepCopy(fields()[7].schema(), other.addr);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sftware)) {
        this.sftware = data().deepCopy(fields()[8].schema(), other.sftware);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.version)) {
        this.version = data().deepCopy(fields()[9].schema(), other.version);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.logvers)) {
        this.logvers = data().deepCopy(fields()[10].schema(), other.logvers);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.payload)) {
        this.payload = data().deepCopy(fields()[11].schema(), other.payload);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PositionUpload instance
     * @param other The existing instance to copy.
     */
    private Builder(zonar.position_upload.PositionUpload other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.device_id)) {
        this.device_id = data().deepCopy(fields()[0].schema(), other.device_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.count)) {
        this.count = data().deepCopy(fields()[3].schema(), other.count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.skipcount)) {
        this.skipcount = data().deepCopy(fields()[4].schema(), other.skipcount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.first_ts)) {
        this.first_ts = data().deepCopy(fields()[5].schema(), other.first_ts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.last_ts)) {
        this.last_ts = data().deepCopy(fields()[6].schema(), other.last_ts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.addr)) {
        this.addr = data().deepCopy(fields()[7].schema(), other.addr);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sftware)) {
        this.sftware = data().deepCopy(fields()[8].schema(), other.sftware);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.version)) {
        this.version = data().deepCopy(fields()[9].schema(), other.version);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.logvers)) {
        this.logvers = data().deepCopy(fields()[10].schema(), other.logvers);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.payload)) {
        this.payload = data().deepCopy(fields()[11].schema(), other.payload);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.Long getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setDeviceId(long value) {
      validate(fields()[0], value);
      this.device_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearDeviceId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.Integer getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setType(int value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setTs(java.lang.Long value) {
      validate(fields()[2], value);
      this.ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearTs() {
      ts = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Integer getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setCount(java.lang.Integer value) {
      validate(fields()[3], value);
      this.count = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearCount() {
      count = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'skipcount' field.
      * @return The value.
      */
    public java.lang.Integer getSkipcount() {
      return skipcount;
    }

    /**
      * Sets the value of the 'skipcount' field.
      * @param value The value of 'skipcount'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setSkipcount(java.lang.Integer value) {
      validate(fields()[4], value);
      this.skipcount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'skipcount' field has been set.
      * @return True if the 'skipcount' field has been set, false otherwise.
      */
    public boolean hasSkipcount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'skipcount' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearSkipcount() {
      skipcount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_ts' field.
      * @return The value.
      */
    public java.lang.Long getFirstTs() {
      return first_ts;
    }

    /**
      * Sets the value of the 'first_ts' field.
      * @param value The value of 'first_ts'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setFirstTs(java.lang.Long value) {
      validate(fields()[5], value);
      this.first_ts = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'first_ts' field has been set.
      * @return True if the 'first_ts' field has been set, false otherwise.
      */
    public boolean hasFirstTs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'first_ts' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearFirstTs() {
      first_ts = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_ts' field.
      * @return The value.
      */
    public java.lang.Long getLastTs() {
      return last_ts;
    }

    /**
      * Sets the value of the 'last_ts' field.
      * @param value The value of 'last_ts'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setLastTs(java.lang.Long value) {
      validate(fields()[6], value);
      this.last_ts = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'last_ts' field has been set.
      * @return True if the 'last_ts' field has been set, false otherwise.
      */
    public boolean hasLastTs() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'last_ts' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearLastTs() {
      last_ts = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'addr' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddr() {
      return addr;
    }

    /**
      * Sets the value of the 'addr' field.
      * @param value The value of 'addr'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setAddr(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.addr = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'addr' field has been set.
      * @return True if the 'addr' field has been set, false otherwise.
      */
    public boolean hasAddr() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'addr' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearAddr() {
      addr = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sftware' field.
      * @return The value.
      */
    public java.lang.CharSequence getSftware() {
      return sftware;
    }

    /**
      * Sets the value of the 'sftware' field.
      * @param value The value of 'sftware'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setSftware(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.sftware = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sftware' field has been set.
      * @return True if the 'sftware' field has been set, false otherwise.
      */
    public boolean hasSftware() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'sftware' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearSftware() {
      sftware = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.version = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearVersion() {
      version = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'logvers' field.
      * @return The value.
      */
    public java.lang.Integer getLogvers() {
      return logvers;
    }

    /**
      * Sets the value of the 'logvers' field.
      * @param value The value of 'logvers'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setLogvers(int value) {
      validate(fields()[10], value);
      this.logvers = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'logvers' field has been set.
      * @return True if the 'logvers' field has been set, false otherwise.
      */
    public boolean hasLogvers() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'logvers' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearLogvers() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.util.List<zonar.position_upload.GPSPoint> getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder setPayload(java.util.List<zonar.position_upload.GPSPoint> value) {
      validate(fields()[11], value);
      this.payload = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public zonar.position_upload.PositionUpload.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public PositionUpload build() {
      try {
        PositionUpload record = new PositionUpload();
        record.device_id = fieldSetFlags()[0] ? this.device_id : (java.lang.Long) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.Integer) defaultValue(fields()[1]);
        record.ts = fieldSetFlags()[2] ? this.ts : (java.lang.Long) defaultValue(fields()[2]);
        record.count = fieldSetFlags()[3] ? this.count : (java.lang.Integer) defaultValue(fields()[3]);
        record.skipcount = fieldSetFlags()[4] ? this.skipcount : (java.lang.Integer) defaultValue(fields()[4]);
        record.first_ts = fieldSetFlags()[5] ? this.first_ts : (java.lang.Long) defaultValue(fields()[5]);
        record.last_ts = fieldSetFlags()[6] ? this.last_ts : (java.lang.Long) defaultValue(fields()[6]);
        record.addr = fieldSetFlags()[7] ? this.addr : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.sftware = fieldSetFlags()[8] ? this.sftware : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.version = fieldSetFlags()[9] ? this.version : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.logvers = fieldSetFlags()[10] ? this.logvers : (java.lang.Integer) defaultValue(fields()[10]);
        record.payload = fieldSetFlags()[11] ? this.payload : (java.util.List<zonar.position_upload.GPSPoint>) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
