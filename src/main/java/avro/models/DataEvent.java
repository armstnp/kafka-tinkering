/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.models;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8904270057858424373L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataEvent\",\"namespace\":\"avro.models\",\"fields\":[{\"name\":\"event_id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"column\",\"type\":\"string\"},{\"name\":\"old_value\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int event_id;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence database;
  @Deprecated public java.lang.CharSequence table;
  @Deprecated public java.lang.CharSequence column;
  @Deprecated public java.lang.CharSequence old_value;
  @Deprecated public java.lang.CharSequence new_value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataEvent() {}

  /**
   * All-args constructor.
   * @param event_id The new value for event_id
   * @param timestamp The new value for timestamp
   * @param database The new value for database
   * @param table The new value for table
   * @param column The new value for column
   * @param old_value The new value for old_value
   * @param new_value The new value for new_value
   */
  public DataEvent(java.lang.Integer event_id, java.lang.CharSequence timestamp, java.lang.CharSequence database, java.lang.CharSequence table, java.lang.CharSequence column, java.lang.CharSequence old_value, java.lang.CharSequence new_value) {
    this.event_id = event_id;
    this.timestamp = timestamp;
    this.database = database;
    this.table = table;
    this.column = column;
    this.old_value = old_value;
    this.new_value = new_value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event_id;
    case 1: return timestamp;
    case 2: return database;
    case 3: return table;
    case 4: return column;
    case 5: return old_value;
    case 6: return new_value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event_id = (java.lang.Integer)value$; break;
    case 1: timestamp = (java.lang.CharSequence)value$; break;
    case 2: database = (java.lang.CharSequence)value$; break;
    case 3: table = (java.lang.CharSequence)value$; break;
    case 4: column = (java.lang.CharSequence)value$; break;
    case 5: old_value = (java.lang.CharSequence)value$; break;
    case 6: new_value = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'event_id' field.
   * @return The value of the 'event_id' field.
   */
  public java.lang.Integer getEventId() {
    return event_id;
  }

  /**
   * Sets the value of the 'event_id' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.Integer value) {
    this.event_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'database' field.
   * @return The value of the 'database' field.
   */
  public java.lang.CharSequence getDatabase() {
    return database;
  }

  /**
   * Sets the value of the 'database' field.
   * @param value the value to set.
   */
  public void setDatabase(java.lang.CharSequence value) {
    this.database = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'column' field.
   * @return The value of the 'column' field.
   */
  public java.lang.CharSequence getColumn() {
    return column;
  }

  /**
   * Sets the value of the 'column' field.
   * @param value the value to set.
   */
  public void setColumn(java.lang.CharSequence value) {
    this.column = value;
  }

  /**
   * Gets the value of the 'old_value' field.
   * @return The value of the 'old_value' field.
   */
  public java.lang.CharSequence getOldValue() {
    return old_value;
  }

  /**
   * Sets the value of the 'old_value' field.
   * @param value the value to set.
   */
  public void setOldValue(java.lang.CharSequence value) {
    this.old_value = value;
  }

  /**
   * Gets the value of the 'new_value' field.
   * @return The value of the 'new_value' field.
   */
  public java.lang.CharSequence getNewValue() {
    return new_value;
  }

  /**
   * Sets the value of the 'new_value' field.
   * @param value the value to set.
   */
  public void setNewValue(java.lang.CharSequence value) {
    this.new_value = value;
  }

  /**
   * Creates a new DataEvent RecordBuilder.
   * @return A new DataEvent RecordBuilder
   */
  public static avro.models.DataEvent.Builder newBuilder() {
    return new avro.models.DataEvent.Builder();
  }

  /**
   * Creates a new DataEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataEvent RecordBuilder
   */
  public static avro.models.DataEvent.Builder newBuilder(avro.models.DataEvent.Builder other) {
    return new avro.models.DataEvent.Builder(other);
  }

  /**
   * Creates a new DataEvent RecordBuilder by copying an existing DataEvent instance.
   * @param other The existing instance to copy.
   * @return A new DataEvent RecordBuilder
   */
  public static avro.models.DataEvent.Builder newBuilder(avro.models.DataEvent other) {
    return new avro.models.DataEvent.Builder(other);
  }

  /**
   * RecordBuilder for DataEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataEvent>
    implements org.apache.avro.data.RecordBuilder<DataEvent> {

    private int event_id;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence database;
    private java.lang.CharSequence table;
    private java.lang.CharSequence column;
    private java.lang.CharSequence old_value;
    private java.lang.CharSequence new_value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.models.DataEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event_id)) {
        this.event_id = data().deepCopy(fields()[0].schema(), other.event_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.database)) {
        this.database = data().deepCopy(fields()[2].schema(), other.database);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.table)) {
        this.table = data().deepCopy(fields()[3].schema(), other.table);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.column)) {
        this.column = data().deepCopy(fields()[4].schema(), other.column);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.old_value)) {
        this.old_value = data().deepCopy(fields()[5].schema(), other.old_value);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.new_value)) {
        this.new_value = data().deepCopy(fields()[6].schema(), other.new_value);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.models.DataEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.event_id)) {
        this.event_id = data().deepCopy(fields()[0].schema(), other.event_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.database)) {
        this.database = data().deepCopy(fields()[2].schema(), other.database);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.table)) {
        this.table = data().deepCopy(fields()[3].schema(), other.table);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.column)) {
        this.column = data().deepCopy(fields()[4].schema(), other.column);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.old_value)) {
        this.old_value = data().deepCopy(fields()[5].schema(), other.old_value);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.new_value)) {
        this.new_value = data().deepCopy(fields()[6].schema(), other.new_value);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'event_id' field.
      * @return The value.
      */
    public java.lang.Integer getEventId() {
      return event_id;
    }

    /**
      * Sets the value of the 'event_id' field.
      * @param value The value of 'event_id'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setEventId(int value) {
      validate(fields()[0], value);
      this.event_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event_id' field has been set.
      * @return True if the 'event_id' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event_id' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearEventId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'database' field.
      * @return The value.
      */
    public java.lang.CharSequence getDatabase() {
      return database;
    }

    /**
      * Sets the value of the 'database' field.
      * @param value The value of 'database'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setDatabase(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.database = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'database' field has been set.
      * @return True if the 'database' field has been set, false otherwise.
      */
    public boolean hasDatabase() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'database' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearDatabase() {
      database = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.lang.CharSequence getTable() {
      return table;
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.table = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearTable() {
      table = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'column' field.
      * @return The value.
      */
    public java.lang.CharSequence getColumn() {
      return column;
    }

    /**
      * Sets the value of the 'column' field.
      * @param value The value of 'column'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setColumn(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.column = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'column' field has been set.
      * @return True if the 'column' field has been set, false otherwise.
      */
    public boolean hasColumn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'column' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearColumn() {
      column = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'old_value' field.
      * @return The value.
      */
    public java.lang.CharSequence getOldValue() {
      return old_value;
    }

    /**
      * Sets the value of the 'old_value' field.
      * @param value The value of 'old_value'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setOldValue(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.old_value = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'old_value' field has been set.
      * @return True if the 'old_value' field has been set, false otherwise.
      */
    public boolean hasOldValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'old_value' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearOldValue() {
      old_value = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'new_value' field.
      * @return The value.
      */
    public java.lang.CharSequence getNewValue() {
      return new_value;
    }

    /**
      * Sets the value of the 'new_value' field.
      * @param value The value of 'new_value'.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder setNewValue(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.new_value = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'new_value' field has been set.
      * @return True if the 'new_value' field has been set, false otherwise.
      */
    public boolean hasNewValue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'new_value' field.
      * @return This builder.
      */
    public avro.models.DataEvent.Builder clearNewValue() {
      new_value = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DataEvent build() {
      try {
        DataEvent record = new DataEvent();
        record.event_id = fieldSetFlags()[0] ? this.event_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.database = fieldSetFlags()[2] ? this.database : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.table = fieldSetFlags()[3] ? this.table : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.column = fieldSetFlags()[4] ? this.column : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.old_value = fieldSetFlags()[5] ? this.old_value : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.new_value = fieldSetFlags()[6] ? this.new_value : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
